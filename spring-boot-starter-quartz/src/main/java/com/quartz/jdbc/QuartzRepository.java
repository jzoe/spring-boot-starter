package com.quartz.jdbc;import com.quartz.model.entity.QrtzTimedTask;import com.quartz.model.entity.QrtzTimedTaskParam;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.jdbc.core.BeanPropertyRowMapper;import org.springframework.jdbc.core.JdbcOperations;import org.springframework.transaction.PlatformTransactionManager;import org.springframework.transaction.TransactionDefinition;import org.springframework.transaction.TransactionStatus;import org.springframework.transaction.support.TransactionCallback;import org.springframework.transaction.support.TransactionOperations;import org.springframework.transaction.support.TransactionTemplate;import org.springframework.util.Assert;import org.springframework.util.StringUtils;import java.util.ArrayList;import java.util.List;import static com.quartz.model.constant.QuartzConstant.TABLE_NAME;/** * @DESCRIPTION: 定时任务配置表操作 * @AUTHER: chenmin * @CREATE BY: 18/1/2 下午4:28 */public class QuartzRepository {    public static final Logger logger = LoggerFactory.getLogger(QuartzRepository.class);    private static final String SELECT_TASK = "SELECT * FROM " + TABLE_NAME + " T " +            "WHERE T.STATUS = ?";    private static final String SELECT_TASK_BY_NAME = "SELECT * FROM " + TABLE_NAME + " T " +            "WHERE T.TASK_NAME LIKE ?";    private static final String SELECT_TASK_PARAM = "SELECT * FROM " + TABLE_NAME + "_PARAM T " +            "WHERE T.TASK_NAME = ? ORDER BY T.SORT_ID";    private static final String SELECT_TASK_ALL = "SELECT * FROM " + TABLE_NAME + " T";    private static final String SELECT_TASK_PARAM_ALL = "SELECT * FROM " + TABLE_NAME + "_PARAM T";    private static final String INSERT_TASK = "INSERT INTO " + TABLE_NAME + "(TASK_ID, TASK_NAME, TASK_DESC, TASK_EXPRES, TASK_METHOD, TASK_CLASS, TASK_GROUP, STATUS, CREATE_TIME, CREATER) " +            "VALUES(?,?,?,?,?,?,?,?,?,?)";    private static final String INSERT_TASK_PARAM = "INSERT INTO " + TABLE_NAME + "_PARAM(PARAM_ID, PARAM_KEY, PARAM_VALUE, PARAM_TYPE, PARAM_DESC, TASK_NAME, SORT_ID) " +            "VALUES(?,?,?,?,?,?,?)";    private static final String UPDATE_TASK = "UPDATE ";    private static final String UPDATE_TASK_PARAM = "";    private String taskTableName;    private JdbcOperations jdbcOperations;    private TransactionOperations transactionOperations;    public QuartzRepository(JdbcOperations jdbcOperations, PlatformTransactionManager transactionManager) {        Assert.notNull(jdbcOperations, "JdbcOperations must not be null");        Assert.notNull(transactionManager, "transactionManager must not be null");        this.jdbcOperations = jdbcOperations;        this.transactionOperations = createTransactionTemplate(transactionManager);    }    public String getQuerySQL(String taskSQL) {        Assert.notNull(taskSQL, "sql must not be null");        return StringUtils.replace(taskSQL, TABLE_NAME, this.taskTableName);    }    public List<QrtzTimedTask> queryTaskAll() {        return transactionOperations.execute(new TransactionCallback<List<QrtzTimedTask>>() {            @Override            public List<QrtzTimedTask> doInTransaction(TransactionStatus status) {                return QuartzRepository.this.jdbcOperations.query(getQuerySQL(SELECT_TASK_ALL),                        new BeanPropertyRowMapper<QrtzTimedTask>(QrtzTimedTask.class));            }        });    }    public List<QrtzTimedTaskParam> queryTaskParamAll() {        return transactionOperations.execute(new TransactionCallback<List<QrtzTimedTaskParam>>() {            @Override            public List<QrtzTimedTaskParam> doInTransaction(TransactionStatus status) {                return QuartzRepository.this.jdbcOperations.query(getQuerySQL(SELECT_TASK_PARAM_ALL),                        new BeanPropertyRowMapper<QrtzTimedTaskParam>(QrtzTimedTaskParam.class));            }        });    }    public List<QrtzTimedTask> queryValidTaskAndParam(final String valid) {        return transactionOperations.execute(new TransactionCallback<List<QrtzTimedTask>>() {            @Override            public List<QrtzTimedTask> doInTransaction(TransactionStatus status) {                List<QrtzTimedTask> qrtzTimedTaskList = new ArrayList<QrtzTimedTask>();                List<QrtzTimedTask> qrtzTimedTasks = QuartzRepository.this.jdbcOperations.query(getQuerySQL(SELECT_TASK),                        new Object[]{valid}, new BeanPropertyRowMapper<QrtzTimedTask>(QrtzTimedTask.class));                for (QrtzTimedTask qrtzTimedTask : qrtzTimedTasks) {                    List<QrtzTimedTaskParam> qrtzTimedTaskParams = queryTaskParam(qrtzTimedTask.getTaskName());                    qrtzTimedTask.setQrtzTimedTaskParams(qrtzTimedTaskParams);                    qrtzTimedTaskList.add(qrtzTimedTask);                }                return qrtzTimedTaskList;            }        });    }    public List<QrtzTimedTask> queryValidTask(final String valid) {        return transactionOperations.execute(new TransactionCallback<List<QrtzTimedTask>>() {            @Override            public List<QrtzTimedTask> doInTransaction(TransactionStatus status) {                return QuartzRepository.this.jdbcOperations.query(getQuerySQL(SELECT_TASK),                        new Object[]{valid},                        new BeanPropertyRowMapper<QrtzTimedTask>(QrtzTimedTask.class));            }        });    }    public QrtzTimedTask queryTaskByName(final String taskName) {        return transactionOperations.execute(new TransactionCallback<QrtzTimedTask>() {            @Override            public QrtzTimedTask doInTransaction(TransactionStatus status) {                return QuartzRepository.this.jdbcOperations.queryForObject(getQuerySQL(SELECT_TASK_BY_NAME),                        new BeanPropertyRowMapper<QrtzTimedTask>(QrtzTimedTask.class),                        new Object[] {"%" + taskName + "%"});            }        });    }    public List<QrtzTimedTaskParam> queryTaskParam(final String taskName){        return transactionOperations.execute(new TransactionCallback<List<QrtzTimedTaskParam>>() {            @Override            public List<QrtzTimedTaskParam> doInTransaction(TransactionStatus status) {                return QuartzRepository.this.jdbcOperations.query(getQuerySQL(SELECT_TASK_PARAM),                        new Object[]{taskName},                        new BeanPropertyRowMapper<QrtzTimedTaskParam>(QrtzTimedTaskParam.class));            }        });    }    private static TransactionTemplate createTransactionTemplate(            PlatformTransactionManager transactionManager) {        TransactionTemplate transactionTemplate = new TransactionTemplate(                transactionManager);        transactionTemplate.setPropagationBehavior(                TransactionDefinition.PROPAGATION_REQUIRES_NEW);        transactionTemplate.afterPropertiesSet();        return transactionTemplate;    }    public String getTaskTableName() {        return taskTableName;    }    public void setTaskTableName(String taskTableName) {        this.taskTableName = taskTableName;    }}