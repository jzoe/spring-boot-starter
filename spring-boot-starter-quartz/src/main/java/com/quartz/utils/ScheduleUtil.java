package com.quartz.utils;import com.quartz.entity.QrtzTimedTask;import org.quartz.*;import org.slf4j.Logger;import org.slf4j.LoggerFactory;/** * Created by chenmin on 17/11/13. * Schedule定时任务工具类，提供增加，停止，修改，运行功能。 */public class ScheduleUtil {    public static final Logger logger = LoggerFactory.getLogger(ScheduleUtil.class);    private Scheduler scheduler;    public ScheduleUtil setScheduler(Scheduler scheduler) {        this.scheduler = scheduler;        return this;    }    public TriggerKey getTriggerKey(String jobName) {        return getTriggerKey(jobName, TriggerKey.DEFAULT_GROUP);    }    public TriggerKey getTriggerKey(String jobName, String jobGroup) {        return TriggerKey.triggerKey(jobName, jobGroup);    }    public TriggerBuilder createTriggerBuilder(String jobName, String jobGroup) {        return TriggerBuilder.newTrigger().withIdentity(jobName, jobGroup);    }    public JobBuilder createJobBuilder(Class<? extends Job> jobClass, String jobName, String jobGroup) {        return JobBuilder.newJob(jobClass).withIdentity(jobName, jobGroup);    }    public JobDetail createJobDetail(JobBuilder jobBuilder) {        return jobBuilder.build();    }    /**     * 初始化任务调度     *     * @param qrtzTimedTask     * @param cls     */    public void initJob(QrtzTimedTask qrtzTimedTask, Class cls) {        logger.info("初始化任务调度");        try {            TriggerKey triggerKey = TriggerKey.triggerKey(qrtzTimedTask.getTaskName(), qrtzTimedTask.getTaskGroup());            CronTrigger trigger = (CronTrigger) scheduler.getTrigger(triggerKey);            if (null == trigger) {                addQuartzJob(qrtzTimedTask, trigger, cls);            }        } catch (Exception e) {            logger.error("初始化任务调度异常！" + e.getMessage(), e);        }    }    public void addQuartzJob(QrtzTimedTask qrtzTimedTask, CronTrigger trigger, Class cls) {        logger.info("向任务调度中添加定时任务");        try {            JobDetail jobDetail = JobBuilder.newJob(cls)                    .withIdentity(qrtzTimedTask.getTaskName(), qrtzTimedTask.getTaskGroup()).build();            jobDetail.getJobDataMap().put(qrtzTimedTask.getTaskName(), qrtzTimedTask);            CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(qrtzTimedTask.getTaskExpres());            trigger = TriggerBuilder.newTrigger().withIdentity(qrtzTimedTask.getTaskName(), qrtzTimedTask.getTaskGroup())                    .withSchedule(scheduleBuilder).build();            scheduler.scheduleJob(jobDetail, trigger);        } catch (Exception e) {            logger.error("向任务调度中添加定时任务异常！" + e.getMessage(), e);        }    }    /**     * 立即运行定时任务     *     * @param jobName     */    public void runJob(String jobName) {        this.runJob(jobName, TriggerKey.DEFAULT_GROUP);    }    public void runJob(String jobName, String jobGroup) {        logger.info("立即运行任务调度中的定时任务");        try {            if (null == jobName) {                logger.info("定时任务信息为空，无法立即运行");                return;            }            JobKey jobKey = JobKey.jobKey(jobName, jobGroup);            if (null == jobKey) {                logger.info("任务调度中不存在[" + jobName + "]定时任务，不予立即运行！");                return;            }            scheduler.triggerJob(jobKey);        } catch (Exception e) {            logger.error("立即运行任务调度中的定时任务异常！", e);        }    }    /**     * 修改任务调度中的定时任务     *     * @param cronExp     * @param triggerKey     * @param trigger     */    public void updateJob(String cronExp, TriggerKey triggerKey, CronTrigger trigger) {        logger.info("修改任务调度中的定时任务");        try {            if (null == cronExp || null == triggerKey || null == trigger) {                logger.info("修改调度任务参数不正常！");                return;            }            logger.info("原始任务表达式:" + trigger.getCronExpression()                    + "，现在任务表达式:" + cronExp);            if (trigger.getCronExpression().equals(cronExp)) {                logger.info("任务调度表达式一致，不予进行修改！");                return;            }            logger.info("任务调度表达式不一致，进行修改");            CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(cronExp);            trigger = trigger.getTriggerBuilder().withIdentity(triggerKey).withSchedule(scheduleBuilder).build();            scheduler.rescheduleJob(triggerKey, trigger);        } catch (Exception e) {            logger.error("修改任务调度中的定时任务异常！", e);        }    }    /**     * 暂停任务调度中的定时任务     *     * @param jobName     */    void pauseJob(String jobName) {        this.pauseJob(jobName, TriggerKey.DEFAULT_GROUP);    }    /**     * 暂停任务调度中的定时任务     *     * @param jobName     * @param jobGroup     */    void pauseJob(String jobName, String jobGroup) {        logger.info("暂停任务调度中的定时任务");        try {            if (null == jobName) {                logger.info("暂停调度任务参数不正常！");                return;            }            JobKey jobKey = JobKey.jobKey(jobName, jobGroup);            if (null == jobKey) {                logger.info("任务调度中不存在[" + jobName + "]定时任务，不予进行暂停！");                return;            }            scheduler.pauseJob(jobKey);        } catch (Exception e) {            logger.error("暂停任务调度中的定时任务异常！", e);        }    }    /**     * 恢复任务调度中的定时任务     *     * @param jobName     */    void resumeJob(String jobName) {        this.resumeJob(jobName, TriggerKey.DEFAULT_GROUP);    }    /**     * 恢复任务调度中的定时任务     *     * @param jobName     * @param jobGroup     */    void resumeJob(String jobName, String jobGroup) {        logger.info("恢复任务调度中的定时任务");        try {            if (null == jobName) {                logger.info("恢复调度任务参数不正常！");                return;            }            JobKey jobKey = JobKey.jobKey(jobName, jobGroup);            if (null == jobKey) {                logger.info("任务调度中不存在[" + jobName + "]定时任务，不予进行恢复！");                return;            }            scheduler.resumeJob(jobKey);        } catch (Exception e) {            logger.error("恢复任务调度中的定时任务异常！", e);        }    }    /**     * 删除任务调度中的定时任务     *     * @param jobName     */    void deleteJob(String jobName) {        this.deleteJob(jobName, TriggerKey.DEFAULT_GROUP);    }    /**     * 删除任务调度中的定时任务     *     * @param jobName     * @param jobGroup     */    void deleteJob(String jobName, String jobGroup) {        logger.info("删除任务调度中的定时任务");        try {            if (null == jobName) {                logger.info("删除调度任务参数不正常！");                return;            }            JobKey jobKey = JobKey.jobKey(jobName, jobGroup);            if (null == jobKey) {                logger.info("任务调度中不存在[" + jobName + "]定时任务，不予进行删除！");                return;            }            scheduler.deleteJob(jobKey);        } catch (Exception e) {            logger.error("删除任务调度中的定时任务异常！", e);        }    }    /**     * 删除任务调度定时器     *     * @param triggerKey     */    void deleteJob(TriggerKey triggerKey) {        logger.info("删除任务调度定时器");        try {            if (null == triggerKey) {                logger.info("停止任务定时器参数不正常，不予进行停止！");                return;            }            logger.info("停止任务定时器");            scheduler.pauseTrigger(triggerKey);            scheduler.unscheduleJob(triggerKey);        } catch (Exception e) {            logger.info("删除任务调度定时器异常！", e);        }    }    // 增加任务：增加任务时，判断jobName是否已存在于当前调度工厂中，增加成功后向*_timed_task表中添加一条任务    // 停止任务：停止任务时，判断任务是否存在，判断任务是否正在运行，如果正在执行，由用户确定是立即停止并将状态置失效还是保持当前的任务执行状态。删除成功后将对应*_timed_task表中的数据状态置无效    // 修改任务：修改任务时，判断任务是否存在，判断任务是否正在运行，只可修改任务的时间表达式，任务的参数配置。同样任务修改成功后对应修改*_timed_task表和*_timed_task_param表数据，修改任务成功后由用户确定是否重新启动    // 运行任务：运行任务时，判断任务是否存在，判断任务是否正在运行，如果正在执行，由用户确定是重新执行还是保持当前的任务执行状态。    // 其中，停止任务只是将任务置失效，调度工程不会去自动执行任务了，可以在页面手动执行}