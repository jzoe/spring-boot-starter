package com.quartz.schedule;import com.quartz.jdbc.QuartzRepository;import com.quartz.model.assist.STATUS;import com.quartz.model.entity.QrtzTimedTask;import org.quartz.*;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.context.ApplicationContext;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.util.ObjectUtils;import java.util.List;/** * @DESCRIPTION: 动态刷新定时任务配置 * @AUTHER: chenmin * @CREATE BY: 18/1/2 下午4:09 */public class ScheduleRefresh {    public static final Logger logger = LoggerFactory.getLogger(ScheduleRefresh.class);    private Scheduler scheduler;    private QuartzRepository quartzRepository;    private ApplicationContext applicationContext;    /**     * 每隔1分钟查库，并根据查询结果决定是否重新设置定时任务     * @throws Exception     */    @Scheduled(cron = "0 * * * * *")    public void scheduleUpdateCronTrigger() throws Exception {        List<QrtzTimedTask> qrtzTimedTasks = quartzRepository.queryValidTaskAndParam(STATUS.VALID);        for (QrtzTimedTask qrtzTimedTask : qrtzTimedTasks) {            String taskName = qrtzTimedTask.getTaskName();            Object bean = applicationContext.getBean(taskName + "Trigger");            if (!ObjectUtils.isEmpty(bean)) {                CronTrigger cronTrigger = (CronTrigger) bean;                TriggerKey cronTriggerKey = cronTrigger.getKey();                scheduler.getTrigger(cronTriggerKey);                CronTrigger trigger = (CronTrigger) scheduler.getTrigger(cronTriggerKey);                String currentCron = trigger.getCronExpression();                logger.info("current task: {}", qrtzTimedTask);                String newCron = qrtzTimedTask.getTaskExpres();                if (currentCron.equals(newCron)) {                    logger.info(taskName + "不需要刷新任务");                    return;                } else {                    logger.info("正在刷新" + taskName + "任务");                    // 表达式调度构建器                    CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(newCron);                    // 按新的cronExpression表达式重新构建trigger                    trigger = (CronTrigger) scheduler.getTrigger(cronTriggerKey);                    trigger = trigger.getTriggerBuilder().withIdentity(cronTriggerKey) //                            .withSchedule(scheduleBuilder).build();                    // 按新的trigger重新设置job执行                    scheduler.rescheduleJob(cronTriggerKey, trigger);                    logger.info(taskName + "任务刷新结束");                }            } else {            }        }    }    public ScheduleRefresh setScheduler(Scheduler scheduler) {        this.scheduler = scheduler;        return this;    }    public ScheduleRefresh setQuartzRepository(QuartzRepository quartzRepository) {        this.quartzRepository = quartzRepository;        return this;    }    public ScheduleRefresh setApplicationContext(ApplicationContext applicationContext) {        this.applicationContext = applicationContext;        return this;    }}