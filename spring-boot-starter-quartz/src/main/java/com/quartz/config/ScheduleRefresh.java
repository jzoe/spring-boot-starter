package com.quartz.config;import com.quartz.jdbc.QuartzRepository;import com.quartz.model.entity.QrtzTimedTask;import org.quartz.*;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.scheduling.annotation.Scheduled;/** * @DESCRIPTION: 动态刷新定时任务配置 * @AUTHER: chenmin * @CREATE BY: 18/1/2 下午4:09 */public class ScheduleRefresh {    public static final Logger logger = LoggerFactory.getLogger(ScheduleRefresh.class);    private JobDetail jobDetail;    private CronTrigger cronTrigger;    private Scheduler scheduler;    private QuartzRepository quartzRepository;    public ScheduleRefresh setJobDetail(JobDetail jobDetail) {        this.jobDetail = jobDetail;        return this;    }    public ScheduleRefresh setCronTrigger(CronTrigger cronTrigger) {        this.cronTrigger = cronTrigger;        return this;    }    public ScheduleRefresh setScheduler(Scheduler scheduler) {        this.scheduler = scheduler;        return this;    }    public ScheduleRefresh setQuartzRepository(QuartzRepository quartzRepository) {        this.quartzRepository = quartzRepository;        return this;    }    /**     * 每隔1s查库，并根据查询结果决定是否重新设置定时任务     * @throws Exception     */    @Scheduled(fixedRate = 1000)    public void scheduleUpdateCronTrigger() throws Exception {        TriggerKey cronTriggerKey = cronTrigger.getKey();        CronTrigger trigger = (CronTrigger) scheduler.getTrigger(cronTriggerKey);        String currentCron = trigger.getCronExpression();        String taskName = cronTriggerKey.getName();        QrtzTimedTask qrtzTimedTask = quartzRepository.queryTaskByName(taskName);        logger.info("current task: {}", qrtzTimedTask);        String newCron = qrtzTimedTask.getTaskExpres();        if (currentCron.equals(newCron)) {            logger.info(taskName + "不需要刷新任务");            return;        } else {            logger.info("正在刷新" + taskName + "任务");            // 表达式调度构建器            CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(newCron);            // 按新的cronExpression表达式重新构建trigger            trigger = (CronTrigger) scheduler.getTrigger(cronTriggerKey);            trigger = trigger.getTriggerBuilder().withIdentity(cronTriggerKey) //                        .withSchedule(scheduleBuilder).build();            // 按新的trigger重新设置job执行            scheduler.rescheduleJob(cronTriggerKey, trigger);            logger.info(taskName + "任务刷新结束");        }    }}