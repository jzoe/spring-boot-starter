package com.quartz.config;import com.quartz.PropertyPlaceholder;import com.quartz.jdbc.QuartzRepository;import com.quartz.schedule.QuartzInit;import com.quartz.utils.QuartzUtil;import org.springframework.beans.BeansException;import org.springframework.beans.factory.BeanFactory;import org.springframework.beans.factory.BeanFactoryAware;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.context.ApplicationContext;import org.springframework.context.ApplicationContextAware;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.core.io.ClassPathResource;import org.springframework.jdbc.core.JdbcOperations;import org.springframework.transaction.PlatformTransactionManager;import org.springframework.util.ObjectUtils;import javax.annotation.Resource;import javax.sql.DataSource;/** * @DESCRIPTION: quartz相关Bean配置 * @AUTHER: chenmin * @CREATE BY: 18/1/12 下午4:42 */@Configuration@ConditionalOnBean(DataSource.class)@EnableConfigurationProperties(QuartzProperties.class)public class QuartzBeanConfiguration implements BeanFactoryAware, ApplicationContextAware {    private BeanFactory beanFactory;    private ApplicationContext applicationContext;    @Bean    @Resource    public QuartzRepository quartzRepository(PropertyPlaceholder propertyPlaceholder,                                             JdbcOperations jdbcOperations,                                             PlatformTransactionManager transactionManager) {        Object tablePrefixObj = propertyPlaceholder.getProperty("org.quartz.jobStore.tablePrefix");        String tablePrefix = ObjectUtils.isEmpty(tablePrefixObj) ? "qrtz_" : tablePrefixObj.toString();        Object tableSuffixObj = propertyPlaceholder.getProperty("org.quartz.jobStore.tableSuffix");        String tableSuffix = ObjectUtils.isEmpty(tableSuffixObj) ? "" : tableSuffixObj.toString();        return new QuartzRepository(jdbcOperations, transactionManager) //                .setTablePrefix(tablePrefix)    //                .setTableSuffix(tableSuffix);    }    @Bean    @Qualifier("quartzPlaceholder")    public PropertyPlaceholder propertyPlaceholder() {        PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder();        propertyPlaceholder.setLocation(new ClassPathResource("quartz.properties"));        return propertyPlaceholder;    }    @Bean    public QuartzUtil quartzUtil(QuartzProperties quartzProperties) {        return new QuartzUtil()                .setConfigurableBeanFactory(beanFactory)                .setQuartzProperties(quartzProperties)                .setApplicationContext(applicationContext);    }    @Bean    public QuartzInit quartzCleanner(QuartzProperties quartzProperties, DataSource dataSource) {        return new QuartzInit(quartzProperties, dataSource);    }    @Override    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {        this.beanFactory = beanFactory;    }    @Override    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {        this.applicationContext = applicationContext;    }}