package com.github.quartz.http;import com.alibaba.fastjson.JSONObject;import com.github.quartz.model.entity.QrtzTimedTask;import com.github.quartz.utils.HttpUtil;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.http.MediaType;import org.springframework.util.ObjectUtils;import org.springframework.util.ReflectionUtils;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.PrintWriter;import java.lang.reflect.Method;import static com.github.quartz.model.constant.HttpConstant.*;/** * @DESCRIPTION: Quartz提供对外访问接口 * @AUTHER: chenmin * @CREATE BY: 18/1/13 上午10:51 */public class ScheduleServlet extends HttpServlet {    private static final Logger logger = LoggerFactory.getLogger(ScheduleServlet.class);    private static final String Charset = "UTF-8";    private ScheduleExecutor scheduleExecutor;    public void setScheduleExecutor(ScheduleExecutor scheduleExecutor) {        this.scheduleExecutor = scheduleExecutor;    }    @Override    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        this.doPost(request, response);    }    @Override    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        String requestBody = HttpUtil.getRequestBody(request, Charset);        JSONObject jsonObject = JSONObject.parseObject(requestBody);        JSONObject resultData = new JSONObject();        if (ObjectUtils.isEmpty(jsonObject)) {            resultData.put(HTTP_FLAG, HTTP_FAILED);            resultData.put(QUARTZ_DATA, "Request parameters cannot be empty");            logger.error("Request parameters cannot be empty");        } else {            QrtzTimedTask qrtzTimedTask = jsonObject.getObject(QUARTZ_DATA, QrtzTimedTask.class);            if (!ObjectUtils.isEmpty(qrtzTimedTask)) {                String methodName = jsonObject.getString(QUARTZ_METHOD);                try {                    Method method = ReflectionUtils.findMethod(                            scheduleExecutor.getClass(), methodName, QrtzTimedTask.class);                    ReflectionUtils.invokeMethod(method, scheduleExecutor, qrtzTimedTask);                    resultData.put(HTTP_FLAG, HTTP_SUCCESS);                } catch (Exception e) {                    logger.error(methodName + " invoked error", e);                    resultData.put(QUARTZ_DATA, e.getMessage());                }            }        }        response.setCharacterEncoding(Charset);        response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);        PrintWriter pw = response.getWriter();        pw.write(resultData.toJSONString());        HttpUtil.close(pw);    }}