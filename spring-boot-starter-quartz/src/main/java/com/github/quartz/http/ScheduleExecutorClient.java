package com.github.quartz.http;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.github.quartz.config.QuartzRestTemplateProperties;import com.github.quartz.model.entity.QrtzTimedTask;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.InitializingBean;import org.springframework.http.HttpEntity;import org.springframework.http.HttpHeaders;import org.springframework.http.MediaType;import org.springframework.util.ObjectUtils;import org.springframework.web.client.RestTemplate;import java.util.Arrays;import java.util.List;import java.util.Random;import static com.github.quartz.model.constant.HttpConstant.*;/** * @DESCRIPTION: Quartz远程调用客户端 * @AUTHER: chenmin * @CREATE BY: 18/1/13 上午12:50 */public class ScheduleExecutorClient implements InitializingBean {    public static final Logger logger = LoggerFactory.getLogger(ScheduleExecutorClient.class);    private RestTemplate restTemplate;    private QuartzRestTemplateProperties quartzRestemplateProperties;    public ScheduleExecutorClient setRestTemplate(RestTemplate restTemplate) {        this.restTemplate = restTemplate;        return this;    }    public ScheduleExecutorClient setQuartzRestemplateProperties(QuartzRestTemplateProperties quartzRestemplateProperties) {        this.quartzRestemplateProperties = quartzRestemplateProperties;        return this;    }    public JSONObject invoke(QrtzTimedTask qrtzTimedTask) {        String result = execute(qrtzTimedTask, String.class);        if (!ObjectUtils.isEmpty(result)) {            return JSON.parseObject(result);        }        return null;    }    public JSONObject add(QrtzTimedTask qrtzTimedTask) {        String result = execute(qrtzTimedTask, String.class);        if (!ObjectUtils.isEmpty(result)) {            return JSON.parseObject(result);        }        return null;    }    public JSONObject delete(QrtzTimedTask qrtzTimedTask) {        String result = execute(qrtzTimedTask, String.class);        if (!ObjectUtils.isEmpty(result)) {            return JSON.parseObject(result);        }        return null;    }    public JSONObject update(QrtzTimedTask qrtzTimedTask) {        String result = execute(qrtzTimedTask, String.class);        if (!ObjectUtils.isEmpty(result)) {            return JSON.parseObject(result);        }        return null;    }    public <T> T execute(QrtzTimedTask qrtzTimedTask, Class<T> responseType) {        StackTraceElement[] stackTraces = Thread.currentThread().getStackTrace();        String methodName = stackTraces[2].getMethodName();        return execute(qrtzTimedTask, methodName, responseType);    }    public <T> T execute(QrtzTimedTask qrtzTimedTask, String method, Class<T> responseType) {        String url = HTTP_PREFIX + randomUri() + quartzRestemplateProperties.getApi() + QUARTZ_API;        JSONObject param = new JSONObject();        param.put(QUARTZ_DATA, qrtzTimedTask);        param.put(QUARTZ_METHOD, method);        return restTemplate.postForObject(url, getHttpEntity(param), responseType);    }    private HttpEntity<String> getHttpEntity(Object object) {        HttpHeaders headers = new HttpHeaders();        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);        headers.add("Accept", MediaType.APPLICATION_JSON.toString());        return new HttpEntity<String>(object.toString(), headers);    }    /**     * 随机获取quartz节点列表中的IP     * @return     */    private String randomUri() {        List<String> ipAddress = quartzRestemplateProperties.getUris();        Random random = new Random();        int number = random.nextInt(ipAddress.size());        return ipAddress.get(number);    }    @Override    public void afterPropertiesSet() throws Exception {        if (ObjectUtils.isEmpty(quartzRestemplateProperties)) {            logger.warn(quartzRestemplateProperties + " is not inited");        }        if (ObjectUtils.isEmpty(quartzRestemplateProperties.getApi()) || ObjectUtils.isEmpty(quartzRestemplateProperties.getUris())) {            logger.warn("ScheduleExecutorClient params missed");            quartzRestemplateProperties.setUris(Arrays.asList("127.0.0.1"));        }        if (ObjectUtils.isEmpty(restTemplate)) {            logger.error("restTemplate can not be null");        }    }}