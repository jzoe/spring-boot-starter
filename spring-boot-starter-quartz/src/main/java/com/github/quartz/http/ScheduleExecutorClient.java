package com.github.quartz.http;import com.alibaba.fastjson.JSONObject;import com.github.quartz.config.QuartzRestTemplateProperties;import com.github.quartz.model.entity.QrtzTimedTask;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.InitializingBean;import org.springframework.util.ObjectUtils;import org.springframework.web.client.RestTemplate;import java.util.List;import java.util.Random;import static com.github.quartz.model.constant.HttpConstant.QUARTZ_API;import static com.github.quartz.model.constant.HttpConstant.QUARTZ_DATA;import static com.github.quartz.model.constant.HttpConstant.QUARTZ_METHOD;/** * @DESCRIPTION: Quartz远程调用客户端 * @AUTHER: chenmin * @CREATE BY: 18/1/13 上午12:50 */public class ScheduleExecutorClient implements InitializingBean {    public static final Logger logger = LoggerFactory.getLogger(ScheduleExecutorClient.class);    private RestTemplate restTemplate;    private QuartzRestTemplateProperties quartzRestemplateProperties;    public ScheduleExecutorClient setRestTemplate(RestTemplate restTemplate) {        this.restTemplate = restTemplate;        return this;    }    public ScheduleExecutorClient setQuartzRestemplateProperties(QuartzRestTemplateProperties quartzRestemplateProperties) {        this.quartzRestemplateProperties = quartzRestemplateProperties;        return this;    }    public void invoke(QrtzTimedTask qrtzTimedTask) {        JSONObject param = new JSONObject();        param.put(QUARTZ_DATA, qrtzTimedTask);        JSONObject resultJSON = execute(randomUri(), param, JSONObject.class);    }    public <T> T execute(String uri, JSONObject param, Class<T> responseType) {        StackTraceElement[] stackTraces = Thread.currentThread().getStackTrace();        String url = uri + quartzRestemplateProperties.getApi() + QUARTZ_API;        String methodName = stackTraces[1].getMethodName();        param.put(QUARTZ_METHOD, methodName);        return restTemplate.postForObject(uri, param, responseType);    }    private String randomUri() {        List<String> ipAddress = quartzRestemplateProperties.getUris();        Random random = new Random();        int number = random.nextInt(ipAddress.size());        return ipAddress.get(number);    }    @Override    public void afterPropertiesSet() throws Exception {        if (ObjectUtils.isEmpty(quartzRestemplateProperties)) {            logger.warn(quartzRestemplateProperties + " is not inited");        }        if (ObjectUtils.isEmpty(quartzRestemplateProperties.getApi()) || ObjectUtils.isEmpty(quartzRestemplateProperties.getUris())) {            logger.warn("ScheduleExecutorClient params missed");        }        if (ObjectUtils.isEmpty(restTemplate)) {            logger.error("restTemplate can not be null");        }    }}