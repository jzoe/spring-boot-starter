package com.github.quartz.jdbc;import com.github.quartz.model.assist.QrtzStatus;import com.github.quartz.model.entity.QrtzTimedTask;import com.github.quartz.model.entity.QrtzTimedTaskParam;import com.github.quartz.exception.BusinessException;import com.github.quartz.utils.ClassUtil;import com.github.quartz.utils.StringUtil;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.InitializingBean;import org.springframework.dao.DataAccessException;import org.springframework.jdbc.core.BatchPreparedStatementSetter;import org.springframework.jdbc.core.JdbcOperations;import org.springframework.jdbc.core.PreparedStatementSetter;import org.springframework.jdbc.core.ResultSetExtractor;import org.springframework.transaction.PlatformTransactionManager;import org.springframework.transaction.TransactionDefinition;import org.springframework.transaction.TransactionStatus;import org.springframework.transaction.annotation.Transactional;import org.springframework.transaction.support.TransactionCallback;import org.springframework.transaction.support.TransactionCallbackWithoutResult;import org.springframework.transaction.support.TransactionOperations;import org.springframework.transaction.support.TransactionTemplate;import org.springframework.util.Assert;import org.springframework.util.ObjectUtils;import org.springframework.util.StringUtils;import java.sql.*;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import static com.github.quartz.model.constant.QuartzConstant.DEFAULT_TASK_TABLE_PREFIX;import static com.github.quartz.model.constant.QuartzConstant.TABLE_PREFIX;import static com.github.quartz.model.constant.QuartzConstant.TABLE_SUFFIX;/** * @DESCRIPTION: 定时任务配置表操作 * @AUTHER: chenmin * @CREATE BY: 18/1/2 下午4:28 */public class QuartzRepository implements InitializingBean {    public static final Logger logger = LoggerFactory.getLogger(QuartzRepository.class);    public static final String DEFAULT_TABLE_PREFIX = DEFAULT_TASK_TABLE_PREFIX;    private static final String SELECT_TASK = "SELECT * FROM " + TABLE_PREFIX + "TIMED_TASK "+TABLE_SUFFIX+" T " +            "WHERE T.STATUS = ?";    private static final String SELECT_TASK_BY_NAME_LIKE = "SELECT * FROM " + TABLE_PREFIX + "TIMED_TASK "+TABLE_SUFFIX+" T " +            "WHERE T.TASK_NAME LIKE ?";    private static final String SELECT_TASK_BY_NAME = "SELECT * FROM " + TABLE_PREFIX + "TIMED_TASK "+TABLE_SUFFIX+" T " +            "WHERE T.TASK_NAME = ?";    private static final String SELECT_TASK_PARAM = "SELECT * FROM " + TABLE_PREFIX + "TIMED_TASK_PARAM "+TABLE_SUFFIX+" T " +            "WHERE T.TASK_NAME = ? ORDER BY T.SORT_ID";    private static final String SELECT_TASK_ALL = "SELECT * FROM " + TABLE_PREFIX + "TIMED_TASK "+TABLE_SUFFIX+" T";    private static final String SELECT_TASK_PARAM_ALL = "SELECT * FROM " + TABLE_PREFIX + "TIMED_TASK_PARAM "+TABLE_SUFFIX+" T";    private static final String INSERT_TASK = "INSERT INTO " + TABLE_PREFIX + "TIMED_TASK "+TABLE_SUFFIX+"(TASK_NAME, TASK_DESC, TASK_EXPRES, TASK_METHOD, TASK_CLASS, TASK_GROUP, STATUS, CREATE_TIMED, CREATER) " +            "VALUES(?,?,?,?,?,?,?,?,?)";    private static final String INSERT_TASK_PARAM = "INSERT INTO " + TABLE_PREFIX + "TIMED_TASK_PARAM "+TABLE_SUFFIX+"(PARAM_KEY, PARAM_VALUE, PARAM_TYPE, PARAM_DESC, TASK_NAME, SORT_ID) " +            "VALUES(?,?,?,?,?,?)";    private static final String UPDATE_TASK_STATUS = "UPDATE " + TABLE_PREFIX + "TIMED_TASK" + TABLE_SUFFIX + " T SET T.STATUS = ? WHERE T.TASK_NAME = ?";    private static final String DELETE_TASK = "DELETE FROM " + TABLE_PREFIX + "TIMED_TASK "+TABLE_SUFFIX+" T WHERE T.TASK_NAME = ?";    private static final String DELETE_TASK_VALID = "DELETE FROM " + TABLE_PREFIX + "TIMED_TASK "+TABLE_SUFFIX+" T WHERE T.STATUS = ?";    private static final String DELETE_TASK_PARAM = "DELETE FROM " + TABLE_PREFIX + "TIMED_TASK_PARAM "+TABLE_SUFFIX+" T WHERE T.TASK_NAME = ?";    private final ResultSetExtractor<List<QrtzTimedTask>> qrtzTimedTaskResultSetExtractor =            new QrtzResultSetExtractor<QrtzTimedTask>().setClazz(QrtzTimedTask.class);    private final ResultSetExtractor<List<QrtzTimedTaskParam>> qrtzTimedTaskParamResultSetExtractor =            new QrtzResultSetExtractor<QrtzTimedTaskParam>().setClazz(QrtzTimedTaskParam.class);    private String tablePrefix;    private String tableSuffix;    private JdbcOperations jdbcOperations;    private TransactionOperations transactionOperations;    public QuartzRepository(JdbcOperations jdbcOperations, PlatformTransactionManager transactionManager) {        Assert.notNull(jdbcOperations, "JdbcOperations must not be null");        Assert.notNull(transactionManager, "transactionManager must not be null");        this.jdbcOperations = jdbcOperations;        this.transactionOperations = createTransactionTemplate(transactionManager);    }    public String getQuerySQL(String taskSQL) {        Assert.notNull(taskSQL, "sql must not be null");        return StringUtils.replace(StringUtils.replace(taskSQL, TABLE_PREFIX, this.tablePrefix), TABLE_SUFFIX, this.tableSuffix);    }    public List<QrtzTimedTask> queryTaskAll() {        return transactionOperations.execute(new TransactionCallback<List<QrtzTimedTask>>() {            @Override            public List<QrtzTimedTask> doInTransaction(TransactionStatus status) {                List<QrtzTimedTask> qrtzTimedTaskList = new ArrayList<QrtzTimedTask>();                List<QrtzTimedTask> qrtzTimedTasks = QuartzRepository.this.jdbcOperations.query(                        getQuerySQL(SELECT_TASK_ALL),                        QuartzRepository.this.qrtzTimedTaskResultSetExtractor);                for (QrtzTimedTask qrtzTimedTask : qrtzTimedTasks) {                    List<QrtzTimedTaskParam> qrtzTimedTaskParams = queryTaskParam(qrtzTimedTask.getTaskName());                    qrtzTimedTask.setQrtzTimedTaskParams(qrtzTimedTaskParams);                    qrtzTimedTaskList.add(qrtzTimedTask);                }                return qrtzTimedTaskList;            }        });    }    public List<QrtzTimedTaskParam> queryTaskParamAll() {        return transactionOperations.execute(new TransactionCallback<List<QrtzTimedTaskParam>>() {            @Override            public List<QrtzTimedTaskParam> doInTransaction(TransactionStatus status) {                return QuartzRepository.this.jdbcOperations.query(                        getQuerySQL(SELECT_TASK_PARAM_ALL),                        QuartzRepository.this.qrtzTimedTaskParamResultSetExtractor);            }        });    }    public List<QrtzTimedTask> queryValidTaskAndParam(final QrtzStatus status) {        return transactionOperations.execute(new TransactionCallback<List<QrtzTimedTask>>() {            @Override            public List<QrtzTimedTask> doInTransaction(TransactionStatus transactionStatus) {                List<QrtzTimedTask> qrtzTimedTaskList = new ArrayList<QrtzTimedTask>();                List<QrtzTimedTask> qrtzTimedTasks = QuartzRepository.this.jdbcOperations.query(                        getQuerySQL(SELECT_TASK),                        new PreparedStatementSetter() {                            public void setValues(PreparedStatement ps) throws SQLException {                                ps.setString(1, status.getValue());                            }                        },                        QuartzRepository.this.qrtzTimedTaskResultSetExtractor);                for (QrtzTimedTask qrtzTimedTask : qrtzTimedTasks) {                    List<QrtzTimedTaskParam> qrtzTimedTaskParams = queryTaskParam(qrtzTimedTask.getTaskName());                    qrtzTimedTask.setQrtzTimedTaskParams(qrtzTimedTaskParams);                    qrtzTimedTaskList.add(qrtzTimedTask);                }                return qrtzTimedTaskList;            }        });    }    public List<QrtzTimedTask> queryValidTask(final QrtzStatus status) {        return transactionOperations.execute(new TransactionCallback<List<QrtzTimedTask>>() {            @Override            public List<QrtzTimedTask> doInTransaction(TransactionStatus transactionStatus) {                return QuartzRepository.this.jdbcOperations.query(getQuerySQL(SELECT_TASK),                        new PreparedStatementSetter() {                            public void setValues(PreparedStatement ps) throws SQLException {                                ps.setString(1, status.getValue());                            }                        },                        QuartzRepository.this.qrtzTimedTaskResultSetExtractor);            }        });    }    public QrtzTimedTask queryTaskByNameForLike(final String taskName) {        return transactionOperations.execute(new TransactionCallback<QrtzTimedTask>() {            @Override            public QrtzTimedTask doInTransaction(TransactionStatus status) {                List<QrtzTimedTask> qrtzTimedTasks = QuartzRepository.this.jdbcOperations.query(getQuerySQL(SELECT_TASK_BY_NAME_LIKE),                        new PreparedStatementSetter() {                            public void setValues(PreparedStatement ps) throws SQLException {                                ps.setString(1, "%" + taskName + "%");                            }                        },                        QuartzRepository.this.qrtzTimedTaskResultSetExtractor);                if (!ObjectUtils.isEmpty(qrtzTimedTasks) && qrtzTimedTasks.size() == 1) {                    return qrtzTimedTasks.get(0);                } else if (ObjectUtils.isEmpty(qrtzTimedTasks)) {                    return null;                } else {                    throw new BusinessException("the line results back more data");                }            }        });    }    public QrtzTimedTask queryTaskByName(final String taskName) {        return transactionOperations.execute(new TransactionCallback<QrtzTimedTask>() {            @Override            public QrtzTimedTask doInTransaction(TransactionStatus status) {                List<QrtzTimedTask> qrtzTimedTasks = QuartzRepository.this.jdbcOperations.query(getQuerySQL(SELECT_TASK_BY_NAME),                        new PreparedStatementSetter() {                            public void setValues(PreparedStatement ps) throws SQLException {                                ps.setString(1, taskName);                            }                        },                        QuartzRepository.this.qrtzTimedTaskResultSetExtractor);                if (!ObjectUtils.isEmpty(qrtzTimedTasks) && qrtzTimedTasks.size() == 1) {                    return qrtzTimedTasks.get(0);                } else if (ObjectUtils.isEmpty(qrtzTimedTasks)) {                    return null;                } else {                    throw new BusinessException("the line results back more data");                }            }        });    }    public List<QrtzTimedTaskParam> queryTaskParam(final String taskName) {        return transactionOperations.execute(new TransactionCallback<List<QrtzTimedTaskParam>>() {            @Override            public List<QrtzTimedTaskParam> doInTransaction(TransactionStatus status) {                return QuartzRepository.this.jdbcOperations.query(getQuerySQL(SELECT_TASK_PARAM),                        new PreparedStatementSetter() {                            public void setValues(PreparedStatement ps) throws SQLException {                                ps.setString(1, taskName);                            }                        },                        QuartzRepository.this.qrtzTimedTaskParamResultSetExtractor);            }        });    }    public void save(final QrtzTimedTask... qrtzTimedTasks) {        final List<QrtzTimedTask> qrtzTimedTaskList = Arrays.asList(qrtzTimedTasks);        QuartzRepository.this.jdbcOperations.batchUpdate(                getQuerySQL(INSERT_TASK),                new BatchPreparedStatementSetter() {                    @Override                    public void setValues(PreparedStatement ps, int i) throws SQLException {                        QrtzTimedTask qrtzTimedTask = qrtzTimedTaskList.get(i);                        ps.setString(1, qrtzTimedTask.getTaskName());                        ps.setString(2, qrtzTimedTask.getTaskDesc());                        ps.setString(3, qrtzTimedTask.getTaskExpres());                        ps.setString(4, qrtzTimedTask.getTaskMethod());                        ps.setString(5, qrtzTimedTask.getTaskClass());                        ps.setString(5, qrtzTimedTask.getTaskGroup());                        ps.setString(6, qrtzTimedTask.getStatus().getValue());                        ps.setDate(7, new Date(qrtzTimedTask.getCreateTime().getTime()));                        ps.setString(8, qrtzTimedTask.getCreater());                    }                    @Override                    public int getBatchSize() {                        return qrtzTimedTaskList.size();                    }                });    }    public void save(final QrtzTimedTask qrtzTimedTask) {        this.transactionOperations.execute(new TransactionCallbackWithoutResult() {            protected void doInTransactionWithoutResult(TransactionStatus status) {                QuartzRepository.this.jdbcOperations.update(                        getQuerySQL(INSERT_TASK),                        new PreparedStatementSetter() {                            @Override                            public void setValues(PreparedStatement ps) throws SQLException {                                ps.setString(1, qrtzTimedTask.getTaskName());                                ps.setString(2, qrtzTimedTask.getTaskDesc());                                ps.setString(3, qrtzTimedTask.getTaskExpres());                                ps.setString(4, qrtzTimedTask.getTaskMethod());                                ps.setString(5, qrtzTimedTask.getTaskClass());                                ps.setString(5, qrtzTimedTask.getTaskGroup());                                ps.setString(6, qrtzTimedTask.getStatus().getValue());                                ps.setDate(7, new Date(qrtzTimedTask.getCreateTime().getTime()));                                ps.setString(8, qrtzTimedTask.getCreater());                            }                        });                if (!qrtzTimedTask.getQrtzTimedTaskParams().isEmpty()) {                    save(qrtzTimedTask.getQrtzTimedTaskParams().toArray(new QrtzTimedTaskParam[0]));                }            }        });    }    public void save(final QrtzTimedTaskParam... qrtzTimedTaskParam) {        final List<QrtzTimedTaskParam> qrtzTimedTaskParams = new ArrayList<QrtzTimedTaskParam>(Arrays.asList(qrtzTimedTaskParam));        QuartzRepository.this.jdbcOperations.batchUpdate(                getQuerySQL(INSERT_TASK_PARAM),                new BatchPreparedStatementSetter() {                    @Override                    public void setValues(PreparedStatement ps, int i) throws SQLException {                        QrtzTimedTaskParam qrtzTimedTaskParam = qrtzTimedTaskParams.get(i);                        ps.setString(1, qrtzTimedTaskParam.getParamKey());                        ps.setString(2, qrtzTimedTaskParam.getParamValue());                        ps.setString(3, ObjectUtils.isEmpty(qrtzTimedTaskParam.getParamType()) ? "" : qrtzTimedTaskParam.getParamType());                        ps.setString(4, ObjectUtils.isEmpty(qrtzTimedTaskParam.getParamDesc()) ? "" : qrtzTimedTaskParam.getParamDesc());                        ps.setString(5, qrtzTimedTaskParam.getTaskName());                        ps.setLong(6, ObjectUtils.isEmpty(qrtzTimedTaskParam.getSortId()) ? 0L : qrtzTimedTaskParam.getSortId());                    }                    @Override                    public int getBatchSize() {                        return qrtzTimedTaskParams.size();                    }                });    }    public void updateTaskStatus(final String taskName, final QrtzStatus status) {        QuartzRepository.this.jdbcOperations.update(                getQuerySQL(UPDATE_TASK_STATUS),                new PreparedStatementSetter() {                    @Override                    public void setValues(PreparedStatement ps) throws SQLException {                        ps.setString(1, status.getValue());                        ps.setString(2, taskName);                    }                });    }    public void deleteTask(final String taskName) {        this.transactionOperations.execute(new TransactionCallbackWithoutResult() {            protected void doInTransactionWithoutResult(TransactionStatus status) {                QuartzRepository.this.jdbcOperations.update(                        getQuerySQL(DELETE_TASK),                        new PreparedStatementSetter() {                            public void setValues(PreparedStatement ps) throws SQLException {                                ps.setString(1, taskName);                            }                        });                QuartzRepository.this.jdbcOperations.update(                        getQuerySQL(DELETE_TASK_PARAM),                        new PreparedStatementSetter() {                            public void setValues(PreparedStatement ps) throws SQLException {                                ps.setString(1, taskName);                            }                        });            }        });    }    @Transactional    public void deleteParam(final String taskName) {        this.transactionOperations.execute(new TransactionCallbackWithoutResult() {            protected void doInTransactionWithoutResult(TransactionStatus status) {                QuartzRepository.this.jdbcOperations.update(                        getQuerySQL(DELETE_TASK_PARAM),                        new PreparedStatementSetter() {                            public void setValues(PreparedStatement ps) throws SQLException {                                ps.setString(1, taskName);                            }                        });            }        });    }    @Transactional    public void deleteValid(final QrtzStatus status) {        this.transactionOperations.execute(new TransactionCallbackWithoutResult() {            protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) {                QuartzRepository.this.jdbcOperations.update(                        getQuerySQL(DELETE_TASK_VALID),                        new PreparedStatementSetter() {                            public void setValues(PreparedStatement ps) throws SQLException {                                ps.setString(1, status.getValue());                            }                        });            }        });    }    private class QrtzResultSetExtractor<T> implements ResultSetExtractor<List<T>> {        private Class<T> clazz;        @Override        public List<T> extractData(ResultSet rs) throws SQLException, DataAccessException {            List<T> list = new ArrayList<T>();            ResultSetMetaData metaData = rs.getMetaData();            int columnCount = metaData.getColumnCount();            while (rs.next()) {                T object = getInstance();                for (int i = 0; i < columnCount; i++) {                    String columnName = metaData.getColumnName(i+1);                    Object value = rs.getObject(columnName);                    String fieldName = StringUtil.camelCaseName(columnName);                    ClassUtil.invokeSetter(object, fieldName, value);                }                list.add(object);            }            return list;        }        private T getInstance() {            T obj = null;            try {                obj = this.clazz.newInstance();            } catch (Exception e) {                Assert.notNull(obj, clazz.getName() + " cannot be instantiated");            }            return obj;        }        public QrtzResultSetExtractor setClazz(Class<T> clazz) {            this.clazz = clazz;            return this;        }    }    private static TransactionTemplate createTransactionTemplate(            PlatformTransactionManager transactionManager) {        TransactionTemplate transactionTemplate = new TransactionTemplate(                transactionManager);        transactionTemplate.setPropagationBehavior(                TransactionDefinition.PROPAGATION_REQUIRES_NEW);        transactionTemplate.afterPropertiesSet();        return transactionTemplate;    }    public QuartzRepository setTablePrefix(String tablePrefix) {        this.tablePrefix = tablePrefix;        return this;    }    public QuartzRepository setTableSuffix(String tableSuffix) {        this.tableSuffix = tableSuffix;        return this;    }    @Override    public void afterPropertiesSet() throws Exception {        if (!ObjectUtils.isEmpty(this.tablePrefix)) {            this.setTablePrefix(DEFAULT_TABLE_PREFIX);        }    }}