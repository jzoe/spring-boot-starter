package com.github.quartz.schedule.util;import com.github.quartz.config.BeanInvokingJobDetailFactoryBean;import com.github.quartz.config.QuartzProperties;import com.github.quartz.exception.BusinessException;import com.github.quartz.jdbc.QuartzRepository;import com.github.quartz.model.assist.STATUS;import com.github.quartz.model.entity.QrtzTimedTask;import com.github.quartz.model.entity.QrtzTimedTaskParam;import com.github.quartz.utils.BeanUtil;import com.github.quartz.utils.ClassUtil;import com.github.quartz.utils.HttpUtil;import org.quartz.*;import org.quartz.impl.jdbcjobstore.Constants;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.BeanFactory;import org.springframework.beans.factory.InitializingBean;import org.springframework.beans.factory.support.BeanDefinitionBuilder;import org.springframework.beans.factory.support.DefaultListableBeanFactory;import org.springframework.context.ApplicationContext;import org.springframework.scheduling.quartz.CronTriggerFactoryBean;import org.springframework.util.ObjectUtils;import org.springframework.util.StringUtils;import java.util.Collection;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;/** * @DESCRIPTION: * @AUTHER: chenmin * @CREATE BY: 18/1/12 下午3:19 */public class QuartzUtil implements InitializingBean {    private static final Logger logger = LoggerFactory.getLogger(QuartzUtil.class);    private DefaultListableBeanFactory configurableBeanFactory;    private QuartzProperties quartzProperties;    private ApplicationContext applicationContext;    private QuartzRepository quartzRepository;    private Scheduler scheduler;    public void createJobDetailBeans(Collection<QrtzTimedTask> qrtzTimedTasks) {        for (QrtzTimedTask qrtzTimedTask : qrtzTimedTasks) {            createJobDetailBean(qrtzTimedTask);        }    }    public void createJobDetailBean(QrtzTimedTask qrtzTimedTask) {        Map<String, Object> params = buildParams(qrtzTimedTask);        String targetObject = buildTargetObject(qrtzTimedTask);        BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder.genericBeanDefinition(BeanInvokingJobDetailFactoryBean.class).setScope("prototype");        if (!ObjectUtils.isEmpty(qrtzTimedTask.getTaskGroup())) {            beanDefinitionBuilder.addPropertyValue("group", qrtzTimedTask.getTaskGroup());        }        String beanName = qrtzTimedTask.getTaskName() + "JobDetail";        this.configurableBeanFactory.registerBeanDefinition(beanName, beanDefinitionBuilder                .addPropertyValue("targetMethod", qrtzTimedTask.getTaskMethod())                .addPropertyValue("targetBean", targetObject)                .addPropertyValue("durable", this.quartzProperties.getDurability())                .addPropertyValue("shouldRecover", this.quartzProperties.getShouldRecover())                .addPropertyValue("volatility", this.quartzProperties.getVolatility())                .addPropertyValue("concurrent", this.quartzProperties.getConcurrent())                .addPropertyValue("arguments", new Object[]{params})                .getRawBeanDefinition());    }    public void createCronTriggerBeans(Collection<QrtzTimedTask> qrtzTimedTasks) {        for (QrtzTimedTask qrtzTimedTask : qrtzTimedTasks) {            createCronTriggerBean(qrtzTimedTask);        }    }    public void createCronTriggerBean(QrtzTimedTask qrtzTimedTask) {        JobDataMap jobDataMap = new JobDataMap();        jobDataMap.put(Constants.COL_JOB_DATAMAP, qrtzTimedTask);        String key = qrtzTimedTask.getTaskName();        this.configurableBeanFactory.registerBeanDefinition(key + "Trigger",                BeanDefinitionBuilder.genericBeanDefinition(CronTriggerFactoryBean.class).setScope("prototype")                        .addPropertyReference("jobDetail", key + "JobDetail")                        .addPropertyValue("cronExpression", qrtzTimedTask.getTaskExpres())                        .addPropertyValue("jobDataMap", jobDataMap)                        .getRawBeanDefinition());    }    public void startSchedule(QrtzTimedTask qrtzTimedTask) throws SchedulerException {        checkScheduler();        startSchedule(qrtzTimedTask, this.scheduler);    }    public void startSchedule(QrtzTimedTask qrtzTimedTask, Scheduler scheduler) throws SchedulerException {        Trigger trigger = (Trigger) this.applicationContext.getBean(qrtzTimedTask.getTaskName() + "Trigger");        JobDetail jobDetail = (JobDetail) this.applicationContext.getBean(qrtzTimedTask.getTaskName() + "JobDetail");        scheduler.scheduleJob(jobDetail, trigger);    }    public Map<String, Object> buildParams(QrtzTimedTask qrtzTimedTask) {        Map<String, Object> param = new LinkedHashMap<String, Object>();        List<QrtzTimedTaskParam> taskParams = qrtzTimedTask.getQrtzTimedTaskParams();        if (!taskParams.isEmpty()) {            for (QrtzTimedTaskParam taskParam : taskParams) {                String paramKey = taskParam.getParamKey();                String paramValue = taskParam.getParamValue();                String paramType = taskParam.getParamType();                Object value = paramValue;                if (!StringUtils.isEmpty(paramType)) {                    value = BeanUtil.getPrimitiveValue(paramValue, paramType);                }                param.put(paramKey, value);            }        }        return param;    }    public String buildTargetObject(QrtzTimedTask qrtzTimedTask) {        String taskInterFace = qrtzTimedTask.getTaskClass();        int tag = taskInterFace.lastIndexOf(".");        String beanName = null;        if (tag > 0) {            String interFaceName = taskInterFace.substring(tag + 1);            if (interFaceName.startsWith("I") && interFaceName.endsWith("SV")) {                String taskImpl = interFaceName.substring(interFaceName.indexOf("I") + 1) + "Impl";                beanName = ClassUtil.getClassName(taskImpl);            } else {                beanName = ClassUtil.getClassName(interFaceName);            }        } else {            beanName = taskInterFace;        }        return beanName;    }    public boolean quartzIsStart(QuartzProperties quartzProperties) {        List<String> excludeServers = quartzProperties.getExcludeServers();        if (!excludeServers.isEmpty()) {            if (excludeServers.contains(HttpUtil.getIpAddress())) {                return false;            }        }        return true;    }    public void update(QrtzTimedTask newQrtzTimedTask) throws SchedulerException {        checkScheduler();        update(newQrtzTimedTask, this.scheduler);    }    /**     * 更新任务     *     * @param newQrtzTimedTask     * @param scheduler     * @throws SchedulerException     */    public void update(QrtzTimedTask newQrtzTimedTask, Scheduler scheduler) throws SchedulerException {        String taskName = newQrtzTimedTask.getTaskName();        Object bean = applicationContext.getBean(taskName + "Trigger");        if (ObjectUtils.isEmpty(bean)) {            quartzRepository.updateTaskStatus(taskName, STATUS.E);            return;        }        CronTrigger cronTrigger = (CronTrigger) bean;        TriggerKey cronTriggerKey = cronTrigger.getKey();        JobDataMap jobDataMap = cronTrigger.getJobDataMap();        Object jobData = jobDataMap.get(Constants.COL_JOB_DATAMAP);        boolean isUpdateParam = false;        boolean isUpdateExpres = false;        String newCron = newQrtzTimedTask.getTaskExpres();        if (!ObjectUtils.isEmpty(jobData)) {            QrtzTimedTask qrtzTimedTask = (QrtzTimedTask) jobData;            // 是否更新参数            isUpdateParam = !qrtzTimedTask.equals(newQrtzTimedTask);            // 是否更新时间表达式            isUpdateExpres = !qrtzTimedTask.getTaskExpres().equals(newCron);        }        // 参数有变化，删除原任务，重新注册一个任务        if (isUpdateParam) {            // 删除原任务            ScheduleUtil.deleteJob(cronTriggerKey);            // 新建JobDetail            this.createJobDetailBean(newQrtzTimedTask);            // 新建CronTrigger            this.createCronTriggerBean(newQrtzTimedTask);            // 将任务加入调度工厂            this.startSchedule(newQrtzTimedTask, scheduler);        } else if (isUpdateExpres) {            // 参数无变化，时间表达式有变化直接更新原任务            logger.info("正在刷新" + taskName + "任务");            jobDataMap.put(Constants.COL_JOB_DATAMAP, newQrtzTimedTask);            // 表达式调度构建器            CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(newCron);            // 按新的cronExpression表达式重新构建trigger            cronTrigger = cronTrigger.getTriggerBuilder()                    .withIdentity(cronTriggerKey) //                    .withSchedule(scheduleBuilder) //                    .usingJobData(jobDataMap) //                    .build();            // 按新的trigger重新设置job执行            scheduler.rescheduleJob(cronTriggerKey, cronTrigger);            logger.info(taskName + "任务刷新结束");        }    }    /**     * 停止任务     * @param newQrtzTimedTask     */    public void stop(QrtzTimedTask newQrtzTimedTask) {        String taskName = newQrtzTimedTask.getTaskName();        Object bean = applicationContext.getBean(taskName + "Trigger");        if (ObjectUtils.isEmpty(bean)) {            quartzRepository.updateTaskStatus(taskName, STATUS.E);        }        CronTrigger cronTrigger = (CronTrigger) bean;        TriggerKey cronTriggerKey = cronTrigger.getKey();        ScheduleUtil.deleteJob(cronTriggerKey);        quartzRepository.updateTaskStatus(taskName, STATUS.E);    }    public void start(QrtzTimedTask newQrtzTimedTask) throws SchedulerException {        checkScheduler();        start(newQrtzTimedTask, this.scheduler);    }    public void start(QrtzTimedTask newQrtzTimedTask, Scheduler scheduler) throws SchedulerException {        try {            this.createJobDetailBean(newQrtzTimedTask);            this.createCronTriggerBean(newQrtzTimedTask);            this.startSchedule(newQrtzTimedTask, scheduler);            quartzRepository.updateTaskStatus(newQrtzTimedTask.getTaskName(), STATUS.U);        } catch (SchedulerException e) {            quartzRepository.updateTaskStatus(newQrtzTimedTask.getTaskName(), STATUS.E);            throw e;        }    }    private void checkScheduler() throws SchedulerException {        if (ObjectUtils.isEmpty(this.scheduler)) {            throw new SchedulerException("The scheduler is not empty");        }    }    public QuartzUtil setConfigurableBeanFactory(BeanFactory beanFactory) {        this.configurableBeanFactory = (DefaultListableBeanFactory) beanFactory;        return this;    }    public QuartzUtil setQuartzProperties(QuartzProperties quartzProperties) {        this.quartzProperties = quartzProperties;        return this;    }    public QuartzUtil setApplicationContext(ApplicationContext applicationContext) {        this.applicationContext = applicationContext;        return this;    }    public QuartzUtil setQuartzRepository(QuartzRepository quartzRepository) {        this.quartzRepository = quartzRepository;        return this;    }    public QuartzUtil setScheduler(Scheduler scheduler) {        this.scheduler = scheduler;        return this;    }    @Override    public void afterPropertiesSet() throws Exception {        if (ObjectUtils.isEmpty(this.quartzProperties)) {            throw new BusinessException("quartzProperties can not be null");        }        if (ObjectUtils.isEmpty(this.applicationContext)) {            throw new BusinessException("applicationContext can not be null");        }        if (ObjectUtils.isEmpty(this.configurableBeanFactory)) {            throw new BusinessException("configurableBeanFactory can not be null");        }    }}