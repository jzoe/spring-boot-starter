package com.github.quartz.config;import com.github.quartz.PropertyPlaceholder;import com.github.quartz.http.ScheduleExecutorClient;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.boot.web.client.RestTemplateBuilder;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.core.io.ClassPathResource;import org.springframework.web.client.RestTemplate;/** * @DESCRIPTION: quartz相关Bean配置 * @AUTHER: chenmin * @CREATE BY: 18/1/12 下午4:42 */@Configuration@EnableConfigurationProperties({QuartzRestTemplateProperties.class})public class QuartzBeanConfiguration {    /**     * 加载quartz单点配置文件     * @return     */    @Bean    @Qualifier("quartzPlaceholder")    public PropertyPlaceholder quartzPlaceholder() {        PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder();        propertyPlaceholder.setLocation(new ClassPathResource("quartz.properties"));        return propertyPlaceholder;    }    /**     * 加载quartz集群配置文件     * @return     */    @Bean    @Qualifier("quartzClusterPlaceholder")    public PropertyPlaceholder quartzClusterPlaceholder() {        PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder();        propertyPlaceholder.setLocation(new ClassPathResource("quartz_cluster.properties"));        return propertyPlaceholder;    }    /**     * 创建默认的RestTemplate     * @param restTemplateBuilder     * @param quartzRestTemplateProperties     * @return     */    @Bean    public RestTemplate restTemplate(RestTemplateBuilder restTemplateBuilder,                                     QuartzRestTemplateProperties quartzRestTemplateProperties) {        return restTemplateBuilder                .setReadTimeout(quartzRestTemplateProperties.getReadTimeout())                .setConnectTimeout(quartzRestTemplateProperties.getConnectTimeout()).build();    }    /**     * 远程调用客户端     * @param quartzRestTemplateProperties     * @param restTemplate     * @return     */    @Bean    public ScheduleExecutorClient scheduleExecutorClient(QuartzRestTemplateProperties quartzRestTemplateProperties, RestTemplate restTemplate) {        return new ScheduleExecutorClient()                .setQuartzRestemplateProperties(quartzRestTemplateProperties)                .setRestTemplate(restTemplate);    }}