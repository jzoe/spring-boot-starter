package com.github.quartz.config;import com.github.quartz.PropertyPlaceholder;import com.github.quartz.http.ScheduleExecutorClient;import com.github.quartz.jdbc.QuartzRepository;import com.github.quartz.schedule.SqlScriptExecute;import com.github.quartz.utils.QuartzUtil;import org.springframework.beans.BeansException;import org.springframework.beans.factory.BeanFactory;import org.springframework.beans.factory.BeanFactoryAware;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.boot.web.client.RestTemplateBuilder;import org.springframework.context.ApplicationContext;import org.springframework.context.ApplicationContextAware;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.core.io.ClassPathResource;import org.springframework.jdbc.core.JdbcOperations;import org.springframework.transaction.PlatformTransactionManager;import org.springframework.util.ObjectUtils;import org.springframework.web.client.RestTemplate;import javax.sql.DataSource;import static com.github.quartz.model.constant.QuartzConstant.DEFAULT_TASK_TABLE_PREFIX;/** * @DESCRIPTION: quartz相关Bean配置 * @AUTHER: chenmin * @CREATE BY: 18/1/12 下午4:42 */@Configuration@ConditionalOnBean(DataSource.class)@EnableConfigurationProperties({QuartzRestTemplateProperties.class, QuartzProperties.class})public class QuartzBeanConfiguration implements BeanFactoryAware, ApplicationContextAware {    private ApplicationContext applicationContext;    private BeanFactory beanFactory;    /**     * quartz任务配置表访问类     * @param propertyPlaceholder     * @param jdbcOperations     * @param transactionManager     * @return     */    @Bean    public QuartzRepository quartzRepository(PropertyPlaceholder propertyPlaceholder,                                             JdbcOperations jdbcOperations,                                             PlatformTransactionManager transactionManager) {        Object tablePrefixObj = propertyPlaceholder.getProperty("org.quartz.jobStore.tablePrefix");        String tablePrefix = ObjectUtils.isEmpty(tablePrefixObj) ? DEFAULT_TASK_TABLE_PREFIX : tablePrefixObj.toString();        Object tableSuffixObj = propertyPlaceholder.getProperty("org.quartz.jobStore.tableSuffix");        String tableSuffix = ObjectUtils.isEmpty(tableSuffixObj) ? "" : tableSuffixObj.toString();        return new QuartzRepository(jdbcOperations, transactionManager) //                .setTablePrefix(tablePrefix)    //                .setTableSuffix(tableSuffix);    }    @Bean    public QuartzUtil quartzUtil(QuartzRepository quartzRepository, QuartzProperties quartzProperties) {        return new QuartzUtil()                .setConfigurableBeanFactory(beanFactory)                .setQuartzProperties(quartzProperties)                .setApplicationContext(applicationContext)                .setQuartzRepository(quartzRepository);    }    @Bean    @Qualifier("quartzPlaceholder")    public PropertyPlaceholder propertyPlaceholder() {        PropertyPlaceholder propertyPlaceholder = new PropertyPlaceholder();        propertyPlaceholder.setLocation(new ClassPathResource("quartz.properties"));        return propertyPlaceholder;    }    @Bean    public RestTemplate restTemplate(RestTemplateBuilder restTemplateBuilder) {        return restTemplateBuilder                .setReadTimeout(5000)                .setConnectTimeout(5000).build();    }    /**     * 远程调用客户端     * @param quartzRestTemplateProperties     * @param restTemplate     * @return     */    @Bean    public ScheduleExecutorClient scheduleExecutorClient(QuartzRestTemplateProperties quartzRestTemplateProperties, RestTemplate restTemplate) {        return new ScheduleExecutorClient()                .setQuartzRestemplateProperties(quartzRestTemplateProperties)                .setRestTemplate(restTemplate);    }    @Bean    public SqlScriptExecute quartzCleanner(DataSource dataSource, QuartzProperties quartzProperties) {        return new SqlScriptExecute(quartzProperties, dataSource).setSql("cleanTask.sql");    }    @Override    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {        this.applicationContext = applicationContext;    }    @Override    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {        this.beanFactory = beanFactory;    }}