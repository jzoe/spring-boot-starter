package com.jsch.component;import org.springframework.beans.BeanUtils;import org.springframework.beans.MutablePropertyValues;import org.springframework.boot.bind.RelaxedDataBinder;import org.springframework.boot.jdbc.DatabaseDriver;import org.springframework.util.ClassUtils;import java.util.HashMap;import java.util.Map;/** * Created by chenmin on 17/8/23. */public class SSHSourceBuilder {    private static final String[] DATA_SOURCE_TYPE_NAMES = new String[] {            "com.fndsoft.ssh.SSHSource"};    private Class<? extends SSHSource> type;    private ClassLoader classLoader;    private Map<String, String> properties = new HashMap<String, String>();    public static SSHSourceBuilder create() {        return new SSHSourceBuilder(null);    }    public static SSHSourceBuilder create(ClassLoader classLoader) {        return new SSHSourceBuilder(classLoader);    }    public SSHSourceBuilder(ClassLoader classLoader) {        this.classLoader = classLoader;    }    public SSHSource build() {        Class<? extends SSHSource> type = getType();        SSHSource result = BeanUtils.instantiate(type);//        maybeGetDriverClassName();        bind(result);        return result;    }    private void maybeGetDriverClassName() {        if (!this.properties.containsKey("driverClassName")                && this.properties.containsKey("url")) {            String url = this.properties.get("url");            String driverClass = DatabaseDriver.fromJdbcUrl(url).getDriverClassName();            this.properties.put("driverClassName", driverClass);        }    }    private void bind(SSHSource result) {        MutablePropertyValues properties = new MutablePropertyValues(this.properties);        new RelaxedDataBinder(result).withAlias("ipAddress")                .withAlias("username")                .withAlias("password")                .withAlias("maxSize")                .withAlias("publicKey")                .withAlias("sshPort").bind(properties);    }    public SSHSourceBuilder type(Class<? extends SSHSource> type) {        this.type = type;        return this;    }    public SSHSourceBuilder ipAddress(String ipAddress) {        this.properties.put("ipAddress", ipAddress);        return this;    }    public SSHSourceBuilder username(String username) {        this.properties.put("username", username);        return this;    }    public SSHSourceBuilder password(String password) {        this.properties.put("password", password);        return this;    }    public SSHSourceBuilder maxSize(String maxSize) {        this.properties.put("maxSize", maxSize);        return this;    }    public SSHSourceBuilder sshPort(String sshPort) {        this.properties.put("sshPort", sshPort);        return this;    }    public SSHSourceBuilder setProperties(Map<String, String> properties) {        this.properties.putAll(properties);        return this;    }    @SuppressWarnings("unchecked")    public Class<? extends SSHSource> findType() {        if (this.type != null) {            return this.type;        }        for (String name : DATA_SOURCE_TYPE_NAMES) {            try {                return (Class<? extends SSHSource>) ClassUtils.forName(name,                        this.classLoader);            }            catch (Exception ex) {                // Swallow and continue            }        }        return null;    }    private Class<? extends SSHSource> getType() {        Class<? extends SSHSource> type = findType();        if (type != null) {            return type;        }        throw new IllegalStateException("No supported SSHSource type found");    }}