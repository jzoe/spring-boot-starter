package com.jsch.config;import org.springframework.boot.context.properties.ConfigurationProperties;import java.beans.BeanInfo;import java.beans.Introspector;import java.beans.PropertyDescriptor;import java.lang.reflect.Method;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.Map;/** * Created by chenmin on 17/8/23. */@ConfigurationProperties(prefix = "ssh", ignoreInvalidFields = true)public class SSHProperties {    private String ipAddress = "";    private String username = "";    private String password = "";    private Integer maxSize = 0;  // 连接池最大连接数    private Integer sshPort = 0;  // 端口    private String publicKey = "";  // 公钥    private Map<String, SSHInfo> sshInfo = new LinkedHashMap<String, SSHInfo>();    public SSHProperties() {    }    public Map<String, String> properties() {        return transBean2Map(this);    }    public String getIpAddress() {        return this.ipAddress;    }    public String getUsername() {        return this.username;    }    public String getPassword() {        return this.password;    }    public Integer getMaxSize() {        return this.maxSize;    }    public Integer getSshPort() {        return this.sshPort;    }    public void setIpAddress(String ipAddress) {        this.ipAddress = ipAddress;    }    public void setUsername(String username) {        this.username = username;    }    public void setPassword(String password) {        this.password = password;    }    public void setMaxSize(Integer maxSize) {        this.maxSize = maxSize;    }    public void setSshPort(Integer sshPort) {        this.sshPort = sshPort;    }    public String getPublicKey() {        return publicKey;    }    public void setPublicKey(String publicKey) {        this.publicKey = publicKey;    }    public Map<String, SSHInfo> getSshInfo() {        return sshInfo;    }    public void setSshInfo(Map<String, SSHInfo> sshInfo) {        this.sshInfo = sshInfo;    }    public static class SSHInfo {        private String ipAddress = "";        private String username = "";        private String password = "";        private Integer maxSize = 0;  // 连接池最大连接数        private Integer sshPort = 0;  // 端口        private String publicKey = "";  // 公钥        public Map<String, String> properties() {            return transBean2Map(this);        }        public String getIpAddress() {            return ipAddress;        }        public void setIpAddress(String ipAddress) {            this.ipAddress = ipAddress;        }        public String getUsername() {            return username;        }        public void setUsername(String username) {            this.username = username;        }        public String getPassword() {            return password;        }        public void setPassword(String password) {            this.password = password;        }        public Integer getMaxSize() {            return maxSize;        }        public void setMaxSize(Integer maxSize) {            this.maxSize = maxSize;        }        public Integer getSshPort() {            return sshPort;        }        public void setSshPort(Integer sshPort) {            this.sshPort = sshPort;        }        public String getPublicKey() {            return publicKey;        }        public void setPublicKey(String publicKey) {            this.publicKey = publicKey;        }    }    public static Map<String, String> transBean2Map(Object obj) {        Map<String, String> map = new HashMap<String, String>();        if(obj==null){            return null;        }        try {            BeanInfo beanInfo = Introspector.getBeanInfo(obj.getClass());            PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();            for (PropertyDescriptor property : propertyDescriptors) {                String key = property.getName();                // 过滤class属性                if (!key.equals("class")) {                    // 得到property对应的getter方法                    Method getter = property.getReadMethod();                    if(getter==null){                        continue;                    }                    Object value = getter.invoke(obj);                    if(value!=null){                        map.put(key, value.toString());                    }                }            }        } catch (Exception e) {            throw new RuntimeException(e);        }        return map;    }}