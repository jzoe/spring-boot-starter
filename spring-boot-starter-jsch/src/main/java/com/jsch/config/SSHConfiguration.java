package com.jsch.config;import com.jsch.component.SSHSource;import com.jsch.component.SSHTemplate;import org.springframework.beans.BeansException;import org.springframework.beans.factory.BeanFactory;import org.springframework.beans.factory.BeanFactoryAware;import org.springframework.beans.factory.support.AbstractBeanDefinition;import org.springframework.beans.factory.support.BeanDefinitionBuilder;import org.springframework.beans.factory.support.DefaultListableBeanFactory;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.util.ObjectUtils;import java.util.*;/** * Created by chenmin on 17/8/23. */@Configuration@EnableConfigurationProperties(SSHProperties.class)public class SSHConfiguration implements BeanFactoryAware {    private BeanFactory beanFactory;    @Bean    public List<SSHSource> sshTemplates(SSHProperties sshProperties) {        DefaultListableBeanFactory configurableBeanFactory = (DefaultListableBeanFactory) beanFactory;        BeanDefinitionBuilder sshSource = BeanDefinitionBuilder.genericBeanDefinition(SSHSource.class).setScope("prototype");        BeanDefinitionBuilder sshTemplate = BeanDefinitionBuilder.genericBeanDefinition(SSHTemplate.class).setScope("prototype");        if (sshProperties.getSshInfo().size() == 0) {            // 只有一个服务器            configurableBeanFactory.registerBeanDefinition("sSHSource", builderSource(sshSource, sshProperties.properties(), Collections.<String, String>emptyMap()));            Map<String, String> beans = new HashMap<String, String>();            beans.put("sshSource", "sSHSource");            configurableBeanFactory.registerBeanDefinition("sSHTemplate",builderSource(sshTemplate, Collections.<String, String>emptyMap(), beans));            return null;        }        List<SSHSource> sshSources = new ArrayList<SSHSource>();        Map<String, SSHProperties.SSHInfo> sshInfos = sshProperties.getSshInfo();        // 多服务器注册        for (String sshName : sshInfos.keySet()) {            SSHProperties.SSHInfo sshInfo = sshInfos.get(sshName);            if (ObjectUtils.isEmpty(sshInfo.getSshPort())) {                sshInfo.setSshPort(22);            }            if (ObjectUtils.isEmpty(sshInfo.getMaxSize())) {                sshInfo.setMaxSize(10);            }            configurableBeanFactory.registerBeanDefinition(sshName + "SSHSource", builderSource(sshSource, sshInfo.properties(), Collections.<String, String>emptyMap()));            configurableBeanFactory.registerBeanDefinition(sshName + "SSHTemplate",sshTemplate                    .addPropertyReference("sshSource", sshName + "SSHSource")                    .getRawBeanDefinition());        }        return sshSources;    }    private AbstractBeanDefinition builderSource(BeanDefinitionBuilder builder, Map<String, String> sshProperties, Map<String, String> beanNames) {        // 注册普通属性        if (!ObjectUtils.isEmpty(sshProperties)) {            for (String key : sshProperties.keySet()) {                builder.addPropertyValue(key, sshProperties.get(key));            }        }        // 注入Bean        if (!ObjectUtils.isEmpty(beanNames)) {            for (String beanName : beanNames.keySet()) {                builder.addPropertyReference(beanName, beanNames.get(beanName));            }        }        return builder.getRawBeanDefinition();    }    @Override    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {        this.beanFactory = beanFactory;    }}