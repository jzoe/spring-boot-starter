package com.jsch.config;import com.jsch.component.SSHSource;import com.jsch.component.SSHSourceBuilder;import com.jsch.component.SSHTemplate;import org.springframework.beans.BeansException;import org.springframework.beans.factory.BeanFactory;import org.springframework.beans.factory.BeanFactoryAware;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.config.ConfigurableBeanFactory;import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.util.ObjectUtils;import javax.sql.DataSource;import java.util.ArrayList;import java.util.List;import java.util.Map;/** * Created by chenmin on 17/8/23. */@Configuration@ConditionalOnBean(DataSource.class)@EnableConfigurationProperties(SSHProperties.class)public class SSHConfiguration implements BeanFactoryAware {    @Autowired    private SSHProperties sshProperties;    private BeanFactory beanFactory;    @Bean    public List<SSHSource> sshTemplates() {        ConfigurableBeanFactory configurableBeanFactory = (ConfigurableBeanFactory) beanFactory;        if (sshProperties.getSshInfo().size() == 0) {            // 只有一个服务器            SSHSource sshSource = SSHSourceBuilder.create().type(SSHSource.class).setProperties(sshProperties.properties()).build();            if (sshSource != null) {                configurableBeanFactory.registerSingleton("defaultSSHSource", sshSource);                configurableBeanFactory.registerSingleton("defaultSSHTemplate", new SSHTemplate(sshSource));            }            return null;        }        List<SSHSource> sshSources = new ArrayList<SSHSource>();        Map<String, SSHProperties.SSHInfo> sshInfos = sshProperties.getSshInfo();        for (String sshName : sshInfos.keySet()) {            SSHProperties.SSHInfo sshInfo = sshInfos.get(sshName);            if (ObjectUtils.isEmpty(sshInfo.getSshPort())) {                sshInfo.setSshPort(22);            }            if (ObjectUtils.isEmpty(sshInfo.getMaxSize())) {                sshInfo.setMaxSize(10);            }            SSHSource sshSource = SSHSourceBuilder.create().type(SSHSource.class).setProperties(sshInfo.properties()).build();            if (sshSource != null) {                configurableBeanFactory.registerSingleton(sshName, sshSource);                configurableBeanFactory.registerSingleton(sshName + "SSHTemplate", new SSHTemplate(sshSource));                sshSources.add(sshSource);            }        }        return sshSources;    }    @Override    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {        this.beanFactory = beanFactory;    }}